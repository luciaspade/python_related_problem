# df的强制转换数据类型
df.astype('数据类型')                      #改变整个df的数据类型
df['列名'].astype('数据类型')              #仅改变某一列的数据类型

# df.inset()
4个参数：插入位置、列标签名、列的值、同名情况的处理
loc ： int #使用整型数据，是列数据插入的位置，必须是0到len(columns)之间的数
column ： string, number, or hashable object #类型可以是字符串、数字或者object。表示列的标签名
value ： int, Series, or array-like # 整数、Series或者数组型数据。是插入列的值
allow_duplicates ： bool, optional # 布尔型数据，可选参数。如果某个列名在dataframe中已经存在，将allow_duplicates置为true才可以将同样的列名插入。

# pd.concat()合并df
# ==和df.append()的对比
    df.append()是按行追加拼接，将一个df的行拼接到另外一个df的末尾，返回一个新的df。
    如果列名不在第一个df出现，则将以新的列名添加，没有对应内容的会为空。
    不会改变原来的df，只会创建一个新的df，包含拼接的数据。
    注意：因为会创建一个新的 index 和 data buffer，所以效率不高。pd.concat()效率更高，而且功能更强大

pd.concat( objs, axis=0, join=‘outer’, join_axes=None,ignore_index=False, keys=None, levels=None, names=None, verify_integrity=False, sort=None, copy=True,)
objs 表示需要连接的对象，比如：[df1, df2]，需要将合并的数据用综括号包围；
axis=0 表拼接方式是上下堆叠，当axis=1表示左右拼接；
join 参数控制的是外连接还是内连接，join='outer’表示外连接，保留两个表中的所有信息；join="inner"表示内连接，拼接结果只保留两个表共有的信息；
join_axes参数是在内连接时选择要完整保留哪个表的索引，但是这个参数在官方文档中提醒即将被弃用，所以不做详细讲解，只看一下join参数的表现吧；
————————————————
版权声明：本文为CSDN博主「xue_11」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/xue_11/article/details/118424380
