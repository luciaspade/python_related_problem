# 识别字符串中哪些是数字
str.isnumeric()  如果输入字母或一般的文字字符串，不会识别为True，但如果输入的是'三十'这种大写数字，依然会被识别为数字
str.isdigital()  只对正整数和0返回True，小数和负数都返回false

# 如果要把字符串的所有数字都识别为数字，但其他的字符，包括'三十'都当做字符串，那么用下面的方式
def is_number(s):
    try:    # 如果能运⾏ float(s) 语句，返回 True（字符串 s 是浮点数）
        float(s)
        return True
    except ValueError:  # ValueError 为 Python 的⼀种标准异常，表⽰"传⼊⽆效的参数"
        pass  # 如果引发了 ValueError 这种异常，不做任何事情（pass：不做任何事情，⼀般⽤做占位语句）
        return False
       
# 如果要将混杂数字字符串和大写数字字符串的数字都转换成阿拉伯数字，可用一下函数
def jsl_num_convert(data):
    CN_NUM = {
        '〇': 0, '一': 1, '二': 2, '三': 3, '四': 4, '五': 5, '六': 6, '七': 7, '八': 8, '九': 9, '零': 0,
        '壹': 1, '贰': 2, '叁': 3, '肆': 4, '伍': 5, '陆': 6, '柒': 7, '捌': 8, '玖': 9, '貮': 2, '两': 2,
    }
    CN_UNIT = {
        '十': 10,
        '拾': 10,
        '百': 100,
        '佰': 100,
        '千': 1000,
        '仟': 1000,
        '万': 10000,
        '萬': 10000,
        '亿': 100000000,
        '億': 100000000,
        '兆': 1000000000000,
    }
    if is_number(data):
        return float(data)
    else:
        regex = re.compile(r'[〇一二三四五六七八九零壹贰叁肆伍陆柒捌玖貮两十拾百佰千仟万萬亿億兆元角分]+')
        xxx = regex.search(data)
        if xxx:
            xxx = xxx.group()
        else:
            return None
        result = 0
        result_list = []
        unit = 0
        control = 0
        for i, d in enumerate(xxx):
            if d in '零百佰千仟万萬亿億兆〇' and i == 0:
                return '大写数字格式有误'
                break
            if d == '元':
                continue
            if d == '角':
                result -= CN_NUM[xxx[i - 1]]
                result += CN_NUM[xxx[i - 1]] * 0.1
                continue
            if d == '分':
                result -= CN_NUM[xxx[i - 1]]
                result += CN_NUM[xxx[i - 1]] * 0.01
                continue
            if d in CN_NUM:
                result += CN_NUM[d]
            # 如果为单个数字直接赋值
            elif d in CN_UNIT:
                if unit == 0:
                    unit_1 = CN_UNIT[d]
                    # 这里的处理主要是考虑到类似于二十三亿五千万这种数
                    if result == 0:
                        result = CN_UNIT[d]
                    else:
                        result *= CN_UNIT[d]
                    unit = CN_UNIT[d]
                    result_1 = result
                elif unit > CN_UNIT[d]:
                    result -= CN_NUM[xxx[i - 1]]
                    result += CN_NUM[xxx[i - 1]] * CN_UNIT[d]
                    unit = CN_UNIT[d]
                elif unit <= CN_UNIT[d]:
                    if (CN_UNIT[d] < unit_1) and (len(result_list) == control):
                        result_list.append(result_1)
                        result = (result - result_1) * CN_UNIT[d]
                        control += 1
                    else:
                        result *= CN_UNIT[d]
                    unit = CN_UNIT[d]
                    if len(result_list) == control:
                        unit_1 = unit
                        result_1 = result

            # 处理二十三亿五千万和壹兆零六百二十三亿五千五百万五百这种数，及时截断
            else:
                return '出现了不能匹配的中文数字，请查验'
                break
        #         print('第{}步结果为{}单位为{}'.format(i + 1, result, unit))
        #     print(result_list)
        #     print(result)
        #     print(unit_1)

        return sum(result_list) + result
